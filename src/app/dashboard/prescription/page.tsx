"use client";
import { useSearchParams } from 'next/navigation'
import React, { useEffect, useRef, useState } from "react";
import { useReactToPrint } from "react-to-print";
import RefererPrint from "./RefererPrint";
import PrescriptionPrint from "./PrescriptionPrint";
import { getPatientHistory } from '@/Services/getPatientHistory';
import { getDocotr } from '@/Services/getDoctor';
import { getPrescription } from '@/Services/getPrescription';
// import ReceiptPrint from "./ReceiptPrint";

const PrintHandeler = () => {
  const searchParams = useSearchParams();
  const doctorId = searchParams.get("doctorId")
  const patientId = searchParams.get("patientId")
  const visitId = searchParams.get("visitId");
  const styleForBtn="flex flex-1 border-gray-200 btn border-gray-300 hover:border-gray-300 btn-success join-item text-sm font-semibold leading-6 text-white"
  const printOptions = {
    "IsRefer":true,
    "IsPrescription":true
  }
  const [patientData, setPatientData] = useState<any | null>(null);
  const [doctorData, setDoctorData] = useState<any | null>(null);
  const [prescriptionData, setPrescriptionData] = useState<any | null>(null);
  const [error, setError] = useState("")
  const [loader, setLoader] = useState(true)
  const printRef = useRef(null);
  const handlePrint = useReactToPrint({
    content: () => printRef.current,
    pageStyle: `
        @page { 
          size: A4; 
          margin: 5mm; 
        }
        body {
          -webkit-print-color-adjust: exact;
        }
        .print-container {
          position: relative;
          width: 100%;
          height: 100%;
        }
        .print-footer {
          content: 'This report generated by DardiBook software';
          position: absolute;
          bottom: 10px;
          left: 0;
          width: 100%;
          text-align: center;
          font-size: 10px;
          color: gray;
        }
        .bg-cover {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-image: url('/Logo.svg');
          background-size: 60% 60%;
          opacity: 0.1;
          z-index: -1;
        }
        .page-break {
        page-break-before: always;
      }
      `,
  });

  useEffect(() => {
    console.log("calling")
    const getPatientData = async () => {
      if (patientId && doctorId && visitId) {
        setLoader(true);
        const patientData = await getPatientHistory(patientId, doctorId);
        if (patientData) {
          setPatientData(patientData?.patient);
          setLoader(false);
        } else {
          setError("No patient data available for the provided PatientID.");
          setLoader(false);
        }
        const doctorData = await getDocotr(doctorId);
        if (doctorData.data) {
          setDoctorData(doctorData.data);
          setLoader(false);
        } else {
          setLoader(false);
        }
        const prescriptionDatas = await getPrescription(doctorId,patientId,visitId);
        if (prescriptionDatas.data) {
          setPrescriptionData(prescriptionDatas.data);
          setLoader(false);
        } else {
          setLoader(false);
        }
      } else {
        setError("PatientID ot userId is not provided");
        setLoader(false);
      }
    };
    getPatientData();
  }, [patientId, doctorId]);
  

  return (
    <div className="w-full join-item flex flex-col">
      <button onClick={handlePrint} className={styleForBtn}>
        Print Prescription
      </button>
      {
        !loader && (
          <div ref={printRef}>
        {printOptions?.IsPrescription ? (
          <PrescriptionPrint
            patientInfo={patientData}
            hospitalInfo={doctorData}
            prescriptionInfo={prescriptionData}
          />
        ) : (
          <></>
        )}
        {printOptions?.IsPrescription && printOptions?.IsRefer ? (
          <div className="page-break"></div>
        ) : (
          <></>
        )}
        {printOptions?.IsRefer ? (
          <RefererPrint
            patientInfo={patientData}
            hospitalInfo={doctorData}
            refererInfo={prescriptionData?.refer}
          />
        ) : (
          <></>
        )}

        {/* {(printOptions?.IsPrescription || printOptions?.IsRefer) &&
        printOptions?.IsReceipt ? (
          <div className="page-break"></div>
        ) : (
          <></>
        )} */}

        {/* {printOptions?.IsReceipt ? (
          <ReceiptPrint
            patientInfo={patientData}
            hospitalInfo={doctorData}
            receiptInfo={receiptInfo}
          />
        ) : (
          <></>
        )} */}
      </div>
        )
      }
    </div>
  );
};

export default PrintHandeler;
